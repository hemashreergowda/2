#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"
#include "ns3/netanim-module.h"
using namespace ns3;
NS_LOG_COMPONENT_DEFINE ("SecondScriptExample");
int
main (int argc, char *argv[])
{
 CommandLine cmd;
 cmd.Parse (argc, argv);
 
 Time::SetResolution (Time::NS);
 LogComponentEnable ("UdpEchoClientApplication", LOG_LEVEL_INFO);
 LogComponentEnable ("UdpEchoServerApplication", LOG_LEVEL_INFO);
 NodeContainer nodes;
 nodes.Create (3);
 PointToPointHelper p2p1;
 p2p1.SetDeviceAttribute ("DataRate", StringValue ("5Mbps"));
 p2p1.SetChannelAttribute ("Delay", StringValue ("1ms"));
 PointToPointHelper p2p2;
 p2p2.SetDeviceAttribute ("DataRate", StringValue ("10Mbps"));
 p2p2.SetChannelAttribute ("Delay", StringValue ("5ms"));
 InternetStackHelper stack;
 stack.Install (nodes); 
 Ipv4AddressHelper address;
 address.SetBase ("10.1.1.0", "255.255.255.0");
 NetDeviceContainer devices;
 devices=p2p1.Install (nodes.Get (0), nodes.Get (1));
 Ipv4InterfaceContainer interfaces = address.Assign (devices);
 devices=p2p2.Install (nodes.Get (1), nodes.Get (2));
 address.SetBase ("10.1.2.0", "255.255.255.0"); 
 interfaces = address.Assign (devices);
 
Ipv4GlobalRoutingHelper::PopulateRoutingTables();
UdpEchoServerHelper echoServer (9);//90
 
 ApplicationContainer serverApps = echoServer.Install (nodes.Get (2));
 serverApps.Start (Seconds (1.0));
 serverApps.Stop (Seconds (10.0));
 UdpEchoClientHelper echoClient (interfaces.GetAddress (1), 9);
 echoClient.SetAttribute ("MaxPackets", UintegerValue (1));
 echoClient.SetAttribute ("Interval", TimeValue (Seconds (1.0)));
 echoClient.SetAttribute ("PacketSize", UintegerValue (1024));
 ApplicationContainer clientApps = echoClient.Install (nodes.Get (0));
 clientApps.Start (Seconds (2.0));
 clientApps.Stop (Seconds (10.0));
 
 AnimationInterface anim("np2.xml");
AsciiTraceHelper eventTraces;
p2p1.EnableAsciiAll(eventTraces.CreateFileStream("np2.tr"));
p2p1.EnablePcapAll ("np2");
 Simulator::Run ();
 Simulator::Destroy ();
 return 0;
}
